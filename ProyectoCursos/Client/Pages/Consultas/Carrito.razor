@page "/CarritoCompra"
@using ProyectoCursos.Client.Sesion;
@using System.Text.Json;
@inject IJSRuntime jsRuntime
@inject IUsuarioAutenticadoService usuarioAutenticadoService
@inject NotificationService notificationService
@inject HttpClient httpClient

<PageTitle>RussoCursos - Carrito de Compras</PageTitle>

<div class="container shadow p-4">
    <h3 class="mb-4">Carrito de Compras</h3>

    @if (carritoItems.Count == 0)
    {
        <p>Tu carrito de compras está vacío.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre del Curso</th>
                    <th>Fecha de Inicio</th>
                    <th>Fecha de Fin</th>
                    <th>Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var compra in carritoItems)
                {
                    <tr>
                        <td>@compra.NombreCurso</td>
                        <td>@compra.FechaAlta.ToString("dd/MM/yyyy")</td>
                        <td>@compra.FechaBaja.ToString("dd/MM/yyyy")</td>
                        <td>@compra.Precio.ToString("0.00")</td>
                        <td>
                            <button class="btn btn-outline-danger" @onclick="() => EliminarDelCarrito(compra.CursoId)">Eliminar</button>
                        </td>
                    </tr>
                }

                @if (carritoItems.Count > 0)
                {
                    <div class="text-right mt-4">
                        <h4>Precio Total: $@calcularPrecioTotal(carritoItems).ToString("0.00")</h4>
                        <button class="btn btn-primary" @onclick="ComprarTodo">Comprar Todo</button>
                    </div>
                }
            </tbody>
        </table>
    }
</div>

@code {
    public List<Cursos> carritoItems = new List<Cursos>();

    private double calcularPrecioTotal(List<Cursos> cursos)
    {
        return cursos.Sum(c => c.Precio);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CargarCarrito();

            var userJson = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            if (!string.IsNullOrEmpty(userJson))
            {
                usuarioAutenticadoService.Usuario = JsonSerializer.Deserialize<Usuarios>(userJson, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
            }
        }
        catch (Exception ex)
        {

            notificationService.ShowNotification(
                 titulo: "Error",
                 mensaje: "Registro no existe, por favor haga logout: ",
                 NotificationSeverity.Error
             );
        }
    }

    private async Task CargarCarrito()
    {
        carritoItems.Clear();

        foreach (var carrito in usuarioAutenticadoService.Usuario.Compras)
        {
            try
            {
                var buscar = await httpClient.GetFromJsonAsync<Cursos>($"api/Cursos/{carrito.CursoId}");
                if (buscar != null)
                {
                    carritoItems.Add(buscar);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al cargar el curso con ID {carrito.CursoId}: {ex.Message}");
            }
        }
    }

    private async Task EliminarDelCarrito(int cursoId)
    {
        var cursoAEliminar = carritoItems.FirstOrDefault(c => c.CursoId == cursoId);

        if (cursoAEliminar != null)
        {
            usuarioAutenticadoService.RemoverCursoDelCarrito(cursoAEliminar);
            await CargarCarrito();

            notificationService.ShowNotification(
                titulo: "Curso eliminado",
                mensaje: $"{cursoAEliminar.NombreCurso} ha sido eliminado del carrito.",
                NotificationSeverity.Success
            );
        }
    }

    private async Task ComprarTodo()
    {
        // Crear una copia de la lista de carritoItems
        var carritoItemsCopia = new List<Cursos>(carritoItems);

        foreach (var compra in carritoItemsCopia)
        {
            await ComprarCurso(compra.CursoId);
        }
    }

    private async Task ComprarCurso(int cursoId)
    {
        try
        {
            var compra = new Compras
                {
                    UsuarioId = usuarioAutenticadoService.Usuario.UsuarioId,
                    CursoId = cursoId,
                    Fecha = DateTime.Now
                };

            var response = await httpClient.PostAsJsonAsync("api/Compras", compra);

            if (response.IsSuccessStatusCode)
            {
                EliminarDelCarrito(cursoId);

                notificationService.ShowNotification(
                    titulo: "Compra exitosa",
                    mensaje: "Compra realizada con éxito.",
                    NotificationSeverity.Success
                );
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error en la compra",
                    mensaje: "Hubo un error al realizar la compra.",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al comprar el curso con ID {cursoId}: {ex.Message}");
        }
    }
}
