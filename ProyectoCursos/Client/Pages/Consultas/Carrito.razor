@page "/CarritoCompra"

@using ProyectoCursos.Client.Sesion;
@using System.Text.Json;
@inject IJSRuntime jsRuntime
@inject IUsuarioAutenticadoService usuarioAutenticadoService
@inject NotificationService notificationService
@inject HttpClient httpClient

<PageTitle>RussoCursos - Carrito de Compras</PageTitle>

<div class="container shadow p-4">
    <h3 class="mb-4">Carrito de Compras</h3>

    @if (carritoItems.Count == 0)
    {
        <p>Tu carrito de compras está vacío.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Nombre del Curso</th>
                    <th>Fecha de Inicio</th>
                    <th>Fecha de Fin</th>
                    <th>Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var compra in carritoItems)
                {
                    <tr>
                        <td>@compra.NombreCurso</td>
                        <td>@compra.FechaAlta.ToString("dd/MM/yyyy")</td>
                        <td>@compra.FechaBaja.ToString("dd/MM/yyyy")</td>
                        <td>@compra.Precio.ToString("0.00")</td>
                        <td>
                            <button class="btn btn-outline-danger" @onclick="() => EliminarDelCarrito(compra.CursoId)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    public List<Cursos> carritoItems = new List<Cursos>();

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();

        var userJson = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJson))
        {
            usuarioAutenticadoService.Usuario = JsonSerializer.Deserialize<Usuarios>(userJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
    }

    private async Task CargarCarrito()
    {
        carritoItems.Clear();

        foreach (var carrito in usuarioAutenticadoService.Usuario.Compras)
        {
            var buscar = await httpClient.GetFromJsonAsync<Cursos>($"api/Cursos/{carrito.CursoId}");
            carritoItems.Add(buscar);
        }
    }

    private async Task EliminarDelCarrito(int cursoId)
    {
        var cursoAEliminar = carritoItems.FirstOrDefault(c => c.CursoId == cursoId);

        if (cursoAEliminar != null)
        {
            usuarioAutenticadoService.RemoverCursoDelCarrito(cursoAEliminar);
            await CargarCarrito();

            notificationService.ShowNotification(
                titulo: "Curso eliminado",
                mensaje: $"{cursoAEliminar.NombreCurso} ha sido eliminado del carrito.",
                NotificationSeverity.Success
            );
        }
    }
}
