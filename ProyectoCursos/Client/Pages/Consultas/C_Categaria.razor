@page "/ConsultaCategoria"
@using ProyectoCursos.Client.Sesion;
@inject IUsuarioAutenticadoService usuarioAutenticadoService

@inject HttpClient httpClient


<div class="card">
    <div class="card">
        <div class="card-header">
            <h3> Consulta de Categor&iacute;as </h3>
        </div>

        <div class="card-body">
            <form>
                <div class="input-group d-flex align-items-end">
                    <InputSelect class="form-control col-2" @bind-Value="filtro">
                        <option value="1">Categor&iacute;aId</option>
                        <option value="2">Categoria Nombre</option>
                        <option value="3">Descripci&oacute;n</option>
                        <option value="4">Nivel</option>
                    </InputSelect>

                    <div class="flex-fill mx-2">
                        <div class="input-group">
                            <label class="input-group-text"> Busqueda </label>
                            <InputText class="form-control" @bind-Value="Criterio" />
                        </div>
                    </div>

                    <button type="button" class="btn btn-sm-10 btn-primary" @onclick="Buscar"> <span class="oi oi-magnifying-glass"></span> Buscar </button>
                </div>
            </form>
        </div>

        @if (CategoriasFiltradas is not null && CategoriasFiltradas.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Categor&iacute;aId</th>
                        <th>Categoria Nombre</th>
                        <th>Descripci&oacute;n</th>
                        <th>Nivel</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in CategoriasFiltradas)
                    {
                        <tr>
                            <td>@item.CategoriaId</td>
                            <td>@item.CategoriaNombre</td>
                            <td>@item.Descripcion</td>
                            <td>@GetNivelNombre(item.Nivel)</td>
                            <td><a href="Categoria/@item.CategoriaId">Ver</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div class="card-footer">
        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
            <div class="col-3">
                <label for="CantidaRegistro" class="col-form-label"><strong>Filas</strong>&nbsp;</label>
                <input id="CantidaRegistro" @bind-value="@conteo" disabled class="form-control" />
            </div>
        </div>
    </div>
</div>


@code {
    public List<Categorias>? Categorias { get; set; }
    public List<Categorias>? CategoriasFiltradas { get; set; } 
    public int conteo { get; set; }
    public string filtro { get; set; }
    public string Criterio { get; set; }
    public List<Niveles>? Niveles { get; set; } = new List<Niveles>();

    protected override async Task OnInitializedAsync()
    {
        await BuscarNiveles();
    }

    public string GetNivelNombre(int nivelid)
    {
        var nivel = Niveles.FirstOrDefault(n => n.NivelId == nivelid);
        return nivel != null ? nivel.Nivelnombre : "Nivel desconocido";
    }

    public async Task Buscar()
    {
        Categorias = await httpClient.GetFromJsonAsync<List<Categorias>>($"api/Categoria");

        if (!string.IsNullOrEmpty(Criterio) && !string.IsNullOrEmpty(filtro))
        {
            switch (filtro)
            {
                case "1":
                    CategoriasFiltradas = Categorias.Where(c => c.CategoriaId.ToString() == Criterio).ToList();
                    break;
                case "2":
                    CategoriasFiltradas = Categorias.Where(c => c.CategoriaNombre.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "3":
                    CategoriasFiltradas = Categorias.Where(c => c.Descripcion.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "4":
                    CategoriasFiltradas = Categorias.Where(c => GetNivelNombre(c.Nivel).Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                default:
                    CategoriasFiltradas = Categorias;
                    break;
            }
        }
        else
        {
            CategoriasFiltradas = Categorias;
        }

        conteo = CategoriasFiltradas != null ? CategoriasFiltradas.Count() : 0;
        StateHasChanged();
    }

    public async Task BuscarNiveles()
    {
        Niveles = await httpClient.GetFromJsonAsync<List<Niveles>>("api/Categoria/GetNiveles");
    }
}