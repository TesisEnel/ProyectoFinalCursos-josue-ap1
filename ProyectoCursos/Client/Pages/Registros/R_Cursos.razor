@page "/Cursos"
@page "/Cursos/{CursoId:int}"
@inject HttpClient httpClient
@inject NotificationService notificationService
@using Microsoft.AspNetCore.Components.Authorization
@inject IUsuarioAutenticadoService usuarioAutenticadoService
@using Microsoft.AspNetCore.Authorization
@using ProyectoCursos.Client.Sesion

<PageTitle>RussoCursos</PageTitle>

<EditForm Model="Cursos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container ">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Cursos.</h3>
            </div>
            <div class="card-body">

                @*CursoID*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4 ">
                    <label> Cursos Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Cursos.CursoId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Nombre del Curso*@
                <div class="mb-3 ">
                    <label class="form-label" for="NombreCurso"><i class="oi oi-bookmark" /> Nombre del Curso:</label>
                    <InputText @bind-Value="Cursos.NombreCurso" class="form-control " placeholder="Coloque un nombre para el curso" />
                    <ValidationMessage For="@(() => Cursos.NombreCurso)" />
                </div>

                @*Descripcion*@
                <div class="mb-3">
                    <label class="form-label " for="Descripcion"><i class="oi oi-book" /> Descripci&oacute;n:</label>
                    <InputTextArea @bind-Value="Cursos.Descripcion" class="form-control " placeholder="Describa las caractisticas del curso" />
                    <ValidationMessage For="@(() => Cursos.Descripcion)" />
                </div>

                @*Imagen*@
                <div class="mb-3">
                    <label class="form-label" for="Imagen"><i class="oi oi-puzzle-piece" /> Imagen:</label>
                    <InputFile OnChange="CargarImagen" class="form-control" accept=".png, .jpg, .jpeg" />
                    <ValidationMessage For="@(() => Cursos.RutaImagen)" />
                </div>

                <div Class="input-group mb-3">
                    @*Fecha inicio*@
                    <div Class="form-group mb-3 mx-2">
                        <label class="row-text"> Fecha Inicio </label>
                        <div class="input-group">
                            <input type="date" @bind-value="Cursos.FechaAlta" />
                            <ValidationMessage For="@(() => Cursos.FechaAlta)" />
                        </div>
                    </div>

                    @*Fecha fin*@
                    <div Class="form-group mb-3">
                        <label class="row-text"> Fecha Fin </label>
                        <div class="input-group">
                            <input type="date" @bind-value="Cursos.FechaBaja" />
                            <ValidationMessage For="@(() => Cursos.FechaBaja)" />
                        </div>
                    </div>
                </div>

                @*Programa*@
                <div class="form-group mb-3">
                    <label class="form-label" for="Programa"><i class="oi oi oi-check"/> Programa:</label>
                    <InputTextArea @bind-Value="Cursos.Programa" class="form-control" placeholder="Coloque el programa" />
                    <ValidationMessage For="@(() => Cursos.Programa)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">
                        Categor&iacute;a:
                        <InputSelect @bind-Value="Cursos.Categorias" class="dropdown-toggle">
                            <option value="0" disabled>Seleccione un nivel</option>
                            @foreach (var categoria in Categorias)
                            {
                                <option value="@categoria.CategoriaId">@categoria.CategoriaNombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Cursos.Categorias)" />
                    </label>
                </div>


                @*Precio*@
                <div class="mb-3">
                    <label class="form-label" for="Precio"><i class="oi oi-dollar" /> Precio:</label>

                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <div class="row-cols-xl-2">
                            <InputNumber @bind-Value="Cursos.Precio" class="form-control " placeholder="Coloque el un precio" step="0.01" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => Cursos.Precio)" />
                </div>


            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [Parameter]
    public int CursoId { get; set; }

    public List<Categorias> Categorias { get; set; } = new List<Categorias>();

    public Cursos Cursos { get; set; } = new Cursos();

    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        var buffer = new byte[archivo.Size];

        await archivo.OpenReadStream().ReadAsync(buffer);
        Cursos.RutaImagen = buffer;
    }


    protected override async Task OnInitializedAsync()
    {
        await BuscarCategoria();

        if (CursoId > 0)
        {
            this.Cursos.CursoId = CursoId;
            await Buscar();
        }
    }

    public async Task BuscarCategoria()
    {
        try
        {
            Categorias = await httpClient.GetFromJsonAsync<List<Categorias>>("api/Cursos/GetCategoria");
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: "Debe Registrar una categoría" + ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async Task Buscar()
    {
        try
        {
            var buscar = await httpClient.GetFromJsonAsync<Cursos>($"api/Cursos/{Cursos.CursoId}");
            if (buscar != null)
            {
                this.Cursos = buscar;
                var categoria = Categorias.FirstOrDefault(c => c.CategoriaId == Cursos.Categorias);
                if (categoria != null)
                {
                    this.Cursos.Categorias = categoria.CategoriaId;
                }
                StateHasChanged();
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: "Registro no encontrado" + ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async void Guardar()
    {
        try
        {
            if (Cursos.Categorias == 0)
            {
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "Debe seleccionar una categoría antes de guardar.",
                    NotificationSeverity.Error
                );
                return;
            }

            if (!Cursos.FechaBajaValida())
            {
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "La Fecha Baja debe ser posterior a la Fecha Alta.",
                    NotificationSeverity.Error
                );
                return;
            }

            if (Cursos.Precio <= 0.01 || Cursos.Precio > 1000)
            {
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "El Precio debe estar entre 0.01 y 1000.",
                    NotificationSeverity.Error
                );
                return;
            }

            using var response = await httpClient.PostAsJsonAsync<Cursos>("api/Cursos", Cursos);

            if (response.IsSuccessStatusCode)
            {
                var exito = await response.Content.ReadFromJsonAsync<Cursos>();

                if (exito is not null)
                {
                    this.Cursos = exito;
                    notificationService.ShowNotification(
                        titulo: "Éxito",
                        mensaje: "Registro guardado",
                        NotificationSeverity.Success
                    );
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "El registro no se pudo guardar. Detalles: " + errorContent,
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            Nuevo();
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrió un error al guardar: " + ex.Message,
                NotificationSeverity.Error
            );
        }
    }



    public void Nuevo()
    {
        this.Cursos = new Cursos();
        this.Cursos.Categorias = 0;

    }


    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Cursos/{Cursos.CursoId}");
        if (response.IsSuccessStatusCode)
        {
            notificationService.ShowNotification(
                titulo: "Eliminado",
                mensaje: "Se ha eliminado correctamente",
                NotificationSeverity.Success
            );
            Nuevo();
        }
        else
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "No se pudo eliminar",
                NotificationSeverity.Error
            );
        }
    }
}
