@page "/Compra/{CursoId:int}"
@using Microsoft.AspNetCore.Authorization;
@using ProyectoCursos.Client.Sesion;
@using ProyectoCursos.Shared;
@inject HttpClient httpClient
@inject NotificationService notificationService
@inject IUsuarioAutenticadoService usuarioAutenticadoService

<PageTitle>RussoCursos</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header">
            @*Imagen*@
            <div class="mb-3">
                @if (Curso?.RutaImagen != null)
                {
                    var base64 = Convert.ToBase64String(Curso.RutaImagen);
                    var imgSrc = $"data:image/jpeg;base64,{base64}";
                    <img src="@imgSrc" alt="Imagen del curso" class="item-imagen" />
                }
            </div>
            <h3>@Curso?.NombreCurso - @Categorias?.CategoriaNombre </h3>
        </div>
        <div class=card-body>

            @*Descripcion*@
            <div class="mb-3">
                <label class="form-label">@Curso?.Descripcion</label>
            </div>

            @*Fecha inicio*@
            <div Class="form-group mb-3 margen">
                <label class="row-text"> @Curso?.FechaAlta.ToString("dd/MM/yyyy") </label>
            </div>

            @*Fecha fin*@
            <div Class="form-group mb-3">
                <label class="row-text">@Curso?.FechaBaja.ToString("dd/MM/yyyy") </label>
            </div>

            @*Programa*@
            <div class="form-group mb-3">
                <label class="form-label">@Curso?.Programa</label>
            </div>



            @*Precio*@
            <div class="form-group mb-3">
                <label class="form-label">@Curso?.Precio</label>
                <button type="button" class="btn btn-outline-primary" @onclick="() => Guardar()">Comprar <i class="oi oi-cart" /></button>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public int CursoId { get; set; }
    public int UsuarioId { get; set; }
    public Cursos Curso { get; set; }
    public Carrito Compra { get; set; } = new Carrito();
    public Usuarios? user { get; set; }
    public Categorias? Categorias { get; set; }

    override protected async Task OnInitializedAsync()
    {
        try
        {
            user = usuarioAutenticadoService.Usuario;
            var resultado = await httpClient.GetFromJsonAsync<Cursos>($"api/Cursos/{CursoId}");
            var categoria = await httpClient.GetFromJsonAsync<Categorias>($"api/Categoria/{resultado.Categorias}");
            if (resultado != null)
            {
                Categorias = categoria;
                Curso = resultado;
            }

        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                 titulo: "Error de búsqueda",
                mensaje: "Registro no encontrado" + ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async Task Guardar()
    {
        if (user == null || Curso == null)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Tiene que estar logeado para comprar",
                NotificationSeverity.Error
            );
            return;
        }

        Compra.UsuarioId = user.UsuarioId;
        Compra.CursoId = Curso.CursoId;
        Compra.NombreCurso = Curso.NombreCurso;
        Compra.FechaInicioCurso = Curso.FechaAlta;
        Compra.FechaFinCurso = Curso.FechaBaja;
        Compra.PrecioCurso = Curso.Precio;

        try
        {
            using var response = await httpClient.PostAsJsonAsync($"api/Compras?cursoId={Curso.CursoId}&usuarioId={user.UsuarioId}", Compra);

            if (response.IsSuccessStatusCode)
            {
                var exito = await response.Content.ReadFromJsonAsync<Carrito>();

                if (exito != null)
                {
                    var nuevaCompra = new Carrito
                        {
                            CompraId = exito.CompraId,
                            UsuarioId = user.UsuarioId,
                            CursoId = Curso.CursoId,
                            NombreCurso = Curso.NombreCurso,
                            Fecha = DateTime.Now,
                            FechaInicioCurso = Curso.FechaAlta,
                            FechaFinCurso = Curso.FechaBaja,
                            PrecioCurso = Curso.Precio,
                            Usuario = user,  
                            Curso = Curso   
                        };

                    usuarioAutenticadoService.Usuario.Carrito.Add(nuevaCompra);
                    notificationService.ShowNotification(
                        titulo: "Éxito",
                        mensaje: "Curso añadido al carrito",
                        NotificationSeverity.Success
                    );
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "El curso no se pudo agregar al carrito. Detalles: " + errorContent,
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Ocurrió un error al agregar el curso al carrito: " + ex.Message,
                NotificationSeverity.Error
            );
        }
    }


}